import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {fetchListTaskActionAsync} from './Task.action';
import {Task} from './Task.type';

export interface CounterState {
  value: number;
  listTask: Task[];
  status: 'success' | 'loading' | 'failed';
  openModal: boolean;
}

const initialState: CounterState = {
  value: 0,
  listTask: [],
  status: 'success',
  openModal: false,
};

export const taskSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    createTask: (state, action: PayloadAction<Task>) => {
      state.listTask = [...state.listTask, action.payload];
    },
    setListTask: (state, action: PayloadAction<Task[]>) => {
      state.listTask = action.payload;
      console.log(state.listTask);
    },
    openCloseModal: state => {
      state.openModal = !state.openModal;
    },
  },
  extraReducers: builder => {
    builder.addCase(fetchListTaskActionAsync.pending, state => {
      state.status = 'success';
    });
    builder.addCase(fetchListTaskActionAsync.fulfilled, state => {
      state.status = 'loading';
    });
    builder.addCase(fetchListTaskActionAsync.rejected, state => {
      state.status = 'failed';
    });
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {openCloseModal, setListTask, createTask} = taskSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState): number => state.counter.value;

export default taskSlice.reducer;
