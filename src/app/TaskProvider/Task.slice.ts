import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {ITask} from '../../models/Task';

export interface CounterState {
  value: number;
  listTask: ITask[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  listTask: [{content: 'Clean Your House', id: 1}],
  status: 'idle',
};

export const taskSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    createTask: (state, action: PayloadAction<string>) => {
      state.listTask = [
        ...state.listTask,
        {content: action.payload, id: Math.random()},
      ];
    },
    removeTask: (state, action: PayloadAction<number>) => {
      const index = state.listTask.findIndex(item => {
        return item.id === action.payload;
      });
      state.listTask.splice(index, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {createTask, removeTask} = taskSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState): number => state.counter.value;

export default taskSlice.reducer;
